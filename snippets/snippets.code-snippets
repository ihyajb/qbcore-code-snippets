{    
    "Notify" : { 
       
      "prefix": "QBCore.Functions.Notify", 
       
      "body": [  
  
        "QBCore.Functions.Notify(text, textype, length) -- [text] = message, [type] = primary | error | success, [length] = time till fadeout.",
      ],
      "description": "Allows you to use the built in notification system which means no dependency on another."
    },


    "GetPlayerData" : { 
       
        "prefix": "QBCore.Functions.GetPlayerData", 
         
        "body": [  
    
        "QBCore.Functions.GetPlayerData = function(cb)",
        "    if cb ~= nil then",
        "        cb(QBCore.PlayerData)",
        "    else",
        "        return QBCore.PlayerData",
        "    end",
        "end",
        
        ],
        "description": "Perhaps the most used function in the framework. This functions returns the players data of the current source which, since its used client side, is automatically the client or player. It can be used with modifiers on the end starting with a '.' (period)."
      },

    "oxmysql:execute" : { 
      
      "prefix": "exports.oxmysql:execute", 
        
      "body": [  
  
      "exports.oxmysql:execute('') { ",
      " ",
      "})",
      ],
      "description": "Uses the new oxmysql to execute"
    },

    "oxmysql:insert" : { 
      
      "prefix": "exports.oxmysql:insert", 
        
      "body": [  
  
      "exports.oxmysql:insert('') { ",
      "    ",
      "})",
      ],
      "description": "Uses the new oxmysql to insert"
    },


      "GetCoreObject()" : { 
       
        "prefix": "exports['qb-core']:GetCoreObject()", 
         
        "body": [  
    
          "exports['qb-core']:GetCoreObject()",
        ],
        "description": "QBCore new export method"
      },

      "isLoggedIn" : { 
       
        "prefix": "LocalPlayer.state['isLoggedIn']", 
         
        "body": [  
    
          "LocalPlayer.state['isLoggedIn']",
        ],
        "description": "QBCore new isLoggedIn method"
      },

      "HasItem" : { 
       
        "prefix": "QBCore.Functions.HasItem", 
         
        "body": [  
    
          "QBCore.Functions.HasItem(source , function(HasItem)",
          "    $0",
          "end , 'item Name')",
        ],
        "description": "Returns whether or not a player has a certain item."
      },


      "Add Commands" : { 
       
        "prefix": "QBCore.Commands.Add", 
         
        "body": [  
    
          "QBCore.Commands.Add('commandnamehere', 'help text here', {}, false, function(source, args)",
          "    $0",
          "end)",
        ],
        "description": "Add a command using QBCore.Commands.Add"
      },


      "CreateUseableItem" : { 
       
        "prefix": "QBCore.Functions.CreateUseableItem", 
         
        "body": [  
    
          "QBCore.Functions.CreateUseableItem(item , function(item)",
          "    $0",
          "end)",
        ],
        "description": "Makes an item useable."
      },


      "DrawText" : { 
       
        "prefix": "QBCore.Functions.DrawText", 
         
        "body": [  
    
          "function DrawText(x, y, width, height, scale, r, g, b, a, text)",
          "    SetTextFont(4)",
          "    SetTextProportional(0)",
          "    SetTextScale(scale, scale)",
          "    SetTextColour(r, g, b, a)",
          "    SetTextDropShadow(0, 0, 0, 0,255)",
          "    SetTextEdge(2, 0, 0, 0, 255)",
          "    SetTextDropShadow()",
          "    SetTextOutline()",
          "    SetTextEntry('STRING')",
          "    AddTextComponentString(text)",
          "    DrawText(x - width/2, y - height/2 + 0.005)",
          "end",
        ],
        "description": "Not used as commonly as 3D text, you can draw text on the screen with this function which makes it more convenient than having to make a new function locally."
      },

      "CreateThread" : { 
       
        "prefix": "CreateThread", 
         
        "body": [  
    
          "CreateThread(function()",
          "   while true do",
          "   Wait(1)",
          "    $0",
          "end)",
        ],
        "description": "placeholder"
      },

      "onResourceStart" : { 
       
        "prefix": "onResourceStart", 
         
        "body": [  
    
          "AddEventHandler('onResourceStart', function(resource)",
          "   if resource == GetCurrentResourceName() then",
          "      Wait(100)",
          "      --Do Stuff here$0",
          "   end",
          "end)",

        ],
        "description": "This code runs as soon as a resource starts."
      },

      "onResourceStop" : { 
       
        "prefix": "onResourceStop", 
         
        "body": [  
    
          "AddEventHandler('onResourceStop', function(resource)",
          "   if resource == GetCurrentResourceName() then",
          "      --Do Stuff here$0",
          "   end",
          "end)",

        ],
        "description": "This code runs as soon as a resource is stopped."
      },
      
      "RegisterNetEvent" : { 
       
        "prefix": "RegisterNetEvent", 
         
        "body": [  
    
          "RegisterNetEvent('EventNameHere')",
          "AddEventHandler('EventNameHere', function(data)",
          "    $0",
          "end)",
        ],
        "description": "placeholder"
      },

      "RegisterServerEvent" : { 
       
        "prefix": "RegisterServerEvent", 
         
        "body": [  
    
          "RegisterServerEvent('EventNameHere')",
          "AddEventHandler('EventNameHere', function(data)",
          "    $0",
          "end)",
        ],
        "description": "placeholder"
      },


      "DrawText3D" : { 
       
        "prefix": "QBCore.Functions.DrawText3D", 
         
        "body": [  
    
          "function DrawText3D(x, y, z, text)",
          "    SetTextScale(0.35, 0.35)",
          "    SetTextFont(4)",
          "    SetTextProportional(1)",
          "    SetTextColour(255, 255, 255, 215)",
          "    SetTextEntry('STRING')",
          "    SetTextCentre(true)",
          "    AddTextComponentString(text)",
          "    SetDrawOrigin(x,y,z, 0)",
          "    DrawText(0.0, 0.0)",
          "    local factor = (string.len(text)) / 370",
          "    DrawRect(0.0, 0.0+0.0125, 0.017+ factor, 0.03, 0, 0, 0, 75)",
          "    ClearDrawOrigin()",
          "end",

        ],
        "description": "Another very common function you will see throughout the framework. This allows you to draw floating 3D text on the screen."
      },


      "GetPlayers" : { 
       
        "prefix": "QBCore.Functions.GetPlayers", 
         
        "body": [  
    
        "QBCore.Functions.GetPlayers = function()",
        "    local players = {}",
        "    for _, player in ipairs(GetActivePlayers()) do",
        "        local ped = GetPlayerPed(player)",
        "        if DoesEntityExist(ped) then",
        "            table.insert(players, player)",
        "        end",
        "    end",
        "    return players",
        "end",
        
        ],
        "description": "This function returns a table of all the players currently in the server but is not onesync-infinity compatible when used on the client side. You can use # to return the number or json.encode(table) to return the JSON."
      },

      "PlayerData " : { 
       
        "prefix": "PlayerData ", 
         
        "body": [  
    
        "local PlayerData = {}",
        "",
        "-- Sets the playerdata when spawned",
        "RegisterNetEvent('QBCore:Client:OnPlayerLoaded', function()",
        "    PlayerData = QBCore.Functions.GetPlayerData()",
        "end)",
        "",
        "-- Sets the playerdata to an empty table when the player has quit or did /logout",
        "RegisterNetEvent('QBCore:Client:OnPlayerUnload', function()",
        "    PlayerData = {}",
        "end)",
        "",
        "-- When the players job gets updated this will trigger and update the playerdata",
        "RegisterNetEvent('QBCore:Client:OnJobUpdate', function(JobInfo)",
        "    PlayerData.job = JobInfo",
        "end)",
        "",
        "-- When the players gang gets updated this will trigger and update the playerdata",
        "RegisterNetEvent('QBCore:Client:OnGangUpdate', function(GangInfo)",
        "    PlayerData.gang = GangInfo",
        "end)",
        "",
        "-- This will update all the PlayerData that doesn't get updated with a specific event other than this like the metadata",
        "RegisterNetEvent('QBCore:Player:SetPlayerData', function(val)",
        "    PlayerData = val",
        "end)",
        
        ],
        "description": "This is how to register playerdata without having to call the function everytime. -- Code thanks to BerkieB#5038"
      },


      "Progressbar" : { 
       
        "prefix": "QBCore.Functions.Progressbar", 
         
        "body": [  
    
        "QBCore.Functions.Progressbar('name_here', 'Text that shows on bar...', 5000, false, true, { -- Name | Label | Time | useWhileDead | canCancel",
        "    disableMovement = true,",
        "    disableCarMovement = true,",
        "    disableMouse = false,",
        "    disableCombat = true,",
        "}, {",
        "    animDict = 'anim@gangops@facility@servers@',",
        "    anim = 'hotwire',",
        "    flags = 16,",
        "}, {}, {}, function() -- Play When Done",
        "    --Stuff goes here",
        "    IsDrilling = false",
        "end, function() -- Play When Cancel",
        "    --Stuff goes here",
        "end)",
        
        
        ],
        "description": "Allows you to call this function instead of using an export for the progress bar."
      },

      "SpawnVehicle" : { 
       
        "prefix": "QBCore.Functions.SpawnVehicle", 
         
        "body": [  
    
        "QBCore.Functions.SpawnVehicle = function(model, cb, coords, isnetworked)",
        "    local model = (type(model)=='number' and model or GetHashKey(model))",
        "    local coords = coords ~= nil and coords or QBCore.Functions.GetCoords(PlayerPedId())",
        "    local isnetworked = isnetworked ~= nil and isnetworked or true",
        " ",
        "    RequestModel(model)",
        "    while not HasModelLoaded(model) do",
        "        Citizen.Wait(10)",
        "    end",
        " ",
        "    local veh = CreateVehicle(model, coords.x, coords.y, coords.z, coords.a, isnetworked, false) -- SetEntityAsMissionEntity boolean",
        "    local netid = NetworkGetNetworkIdFromEntity(veh)",
        " ",
        "    SetVehicleHasBeenOwnedByPlayer(vehicle,  true)",
        "    SetNetworkIdCanMigrate(netid, true)",
        "    SetVehicleNeedsToBeHotwired(veh, false)",
        "    SetVehRadioStation(veh, false)",
        " ",
        "    SetModelAsNoLongerNeeded(model)",
        " ",
        "    if cb ~= nil then",
        "        cb(veh)",
        "    end",
        "end",
        
        ],
        "description": "Spawns a specific vehicle model."
      },


      "GetClosestVehicle" : { 
       
        "prefix": "QBCore.Functions.GetClosestVehicle", 
         
        "body": [  
    
        "QBCore.Functions.GetClosestVehicle = function(coords)",
        "    local vehicles        = QBCore.Functions.GetVehicles()",
        "    local closestDistance = -1",
        "    local closestVehicle  = -1",
        "    local coords          = coords",
        " ",
        "    if coords == nil then",
        "        local playerPed = PlayerPedId()",
        "        coords = GetEntityCoords(playerPed)",
        "    end",
        "    for i=1, #vehicles, 1 do",
        "        local vehicleCoords = GetEntityCoords(vehicles[i])",
        "        local distance = #(vehicleCoords - coords)",
        " ",
        "        if closestDistance == -1 or closestDistance > distance then",
        "            closestVehicle  = vehicles[i]",
        "            closestDistance = distance",
        "        end",
        "    end",
        "    return closestVehicle",
        "end",
        
        ],
        "description": "Returns the closest vehicle to the player at the time."
      },


      "SetVehicleProperties" : { 
       
        "prefix": "QBCore.Functions.SetVehicleProperties", 
         
        "body": [  
    
        "QBCore.Functions.SetVehicleProperties = function(vehicle, props)",
        "    SetVehicleModKit(vehicle, 0)",
        " ",
        "    if props.plate ~= nil then",
        "        SetVehicleNumberPlateText(vehicle, props.plate)",
        "    end",
        " ",
        "    if props.plateIndex ~= nil then",
        "        SetVehicleNumberPlateTextIndex(vehicle, props.plateIndex)",
        "    end",
        " ",
        "    if props.health ~= nil then",
        "        SetEntityHealth(vehicle, props.health)",
        "    end",
        " ",
        "    if props.dirtLevel ~= nil then",
        "        SetVehicleDirtLevel(vehicle, props.dirtLevel)",
        "    end",
        " ",
        "    if props.color1 ~= nil then",
        "        local color1, color2 = GetVehicleColours(vehicle)",
        "        SetVehicleColours(vehicle, props.color1, color2)",
        "    end ",
        " ",
        "    if props.color2 ~= nil then",
        "        local color1, color2 = GetVehicleColours(vehicle)",
        "        SetVehicleColours(vehicle, color1, props.color2)",
        "    end",
        " ",
        "    if props.pearlescentColor ~= nil then",
        "        local pearlescentColor, wheelColor = GetVehicleExtraColours(vehicle)",
        "        SetVehicleExtraColours(vehicle, props.pearlescentColor, wheelColor)",
        "    end",
        " ",
        "    if props.wheelColor ~= nil then",
        "        local pearlescentColor, wheelColor = GetVehicleExtraColours(vehicle)",
        "        SetVehicleExtraColours(vehicle, pearlescentColor, props.wheelColor)",
        "    end",
        " ",
        "    if props.wheels ~= nil then",
        "        SetVehicleWheelType(vehicle, props.wheels)",
        "    end",
        " ",
        "    if props.windowTint ~= nil then",
        "        SetVehicleWindowTint(vehicle, props.windowTint)",
        "    end",
        " ",
        "    if props.neonEnabled ~= nil then",
        "        SetVehicleNeonLightEnabled(vehicle, 0, props.neonEnabled[1])",
        "        SetVehicleNeonLightEnabled(vehicle, 1, props.neonEnabled[2])",
        "        SetVehicleNeonLightEnabled(vehicle, 2, props.neonEnabled[3])",
        "        SetVehicleNeonLightEnabled(vehicle, 3, props.neonEnabled[4])",
        "    end",
        " ",
        "    if props.neonColor ~= nil then",
        "        SetVehicleNeonLightsColour(vehicle, props.neonColor[1], props.neonColor[2], props.neonColor[3])",
        "    end",
        " ",
        "    if props.modSmokeEnabled ~= nil then",
        "        ToggleVehicleMod(vehicle, 20, true)",
        "    end",
        " ",
        "    if props.tyreSmokeColor ~= nil then",
        "        SetVehicleTyreSmokeColor(vehicle, props.tyreSmokeColor[1], props.tyreSmokeColor[2], props.tyreSmokeColor[3])",
        "    end",
        " ",
        "    if props.modSpoilers ~= nil then",
        "        SetVehicleMod(vehicle, 0, props.modSpoilers, false)",
        "    end",
        " ",
        "    if props.modFrontBumper ~= nil then",
        "        SetVehicleMod(vehicle, 1, props.modFrontBumper, false)",
        "    end",
        " ",
        "    if props.modRearBumper ~= nil then",
        "        SetVehicleMod(vehicle, 2, props.modRearBumper, false)",
        "    end",
        " ",
        "    if props.modSideSkirt ~= nil then",
        "        SetVehicleMod(vehicle, 3, props.modSideSkirt, false)",
        "    end",
        " ",
        "    if props.modExhaust ~= nil then",
        "        SetVehicleMod(vehicle, 4, props.modExhaust, false)",
        "    end",
        " ",
        "    if props.modFrame ~= nil then",
        "        SetVehicleMod(vehicle, 5, props.modFrame, false)",
        "    end",
        " ",
        "    if props.modGrille ~= nil then",
        "        SetVehicleMod(vehicle, 6, props.modGrille, false)",
        "    end",
        " ",
        "    if props.modHood ~= nil then",
        "        SetVehicleMod(vehicle, 7, props.modHood, false)",
        "    end",
        " ",
        "    if props.modFender ~= nil then",
        "        SetVehicleMod(vehicle, 8, props.modFender, false)",
        "    end",
        " ",
        "    if props.modRightFender ~= nil then ",
        "        SetVehicleMod(vehicle, 9, props.modRightFender, false)",
        "    end",
        " ",
        "    if props.modRoof ~= nil then",
        "        SetVehicleMod(vehicle, 10, props.modRoof, false)",
        "    end",
        " ",
        "    if props.modEngine ~= nil then",
        "        SetVehicleMod(vehicle, 11, props.modEngine, false)",
        "    end",
        " ", 
        "    if props.modBrakes ~= nil then",
        "        SetVehicleMod(vehicle, 12, props.modBrakes, false)",
        "    end",
        " ",
        "    if props.modTransmission ~= nil then",
        "        SetVehicleMod(vehicle, 13, props.modTransmission, false)",
        "    end",
        " ",
        "    if props.modHorns ~= nil then",
        "        SetVehicleMod(vehicle, 14, props.modHorns, false)",
        "    end",
        " ",
        "    if props.modSuspension ~= nil then",
        "        SetVehicleMod(vehicle, 15, props.modSuspension, false)",
        "    end",
        " ",
        "    if props.modArmor ~= nil then",
        "        SetVehicleMod(vehicle, 16, props.modArmor, false)",
        "    end",
        " ",
        "    if props.modTurbo ~= nil then",
        "        ToggleVehicleMod(vehicle,  18, props.modTurbo)",
        "    end",
        " ",
        "    if props.modXenon ~= nil then",
        "        ToggleVehicleMod(vehicle,  22, props.modXenon)",
        "    end",
        " ",
        "    if props.modFrontWheels ~= nil then",
        "        SetVehicleMod(vehicle, 23, props.modFrontWheels, false)",
        "    end",
        " ",
        "    if props.modBackWheels ~= nil then",
        "        SetVehicleMod(vehicle, 24, props.modBackWheels, false)",
        "    end",
        " ",
        "    if props.modPlateHolder ~= nil then",
        "        SetVehicleMod(vehicle, 25, props.modPlateHolder, false)",
        "    end",
        " ",
        "    if props.modVanityPlate ~= nil then",
        "        SetVehicleMod(vehicle, 26, props.modVanityPlate, false)",
        "    end",
        " ",
        "    if props.modTrimA ~= nil then",
        "        SetVehicleMod(vehicle, 27, props.modTrimA, false)",
        "    end",
        " ",
        "    if props.modOrnaments ~= nil then",
        "        SetVehicleMod(vehicle, 28, props.modOrnaments, false)",
        "    end",
        " ",
        "    if props.modDashboard ~= nil then",
        "        SetVehicleMod(vehicle, 29, props.modDashboard, false)",
        "    end",
        " ",
        "    if props.modDial ~= nil then",
        "        SetVehicleMod(vehicle, 30, props.modDial, false)",
        "    end",
        " ",
        "    if props.modDoorSpeaker ~= nil then",
        "        SetVehicleMod(vehicle, 31, props.modDoorSpeaker, false)",
        "    end",
        " ",
        "    if props.modSeats ~= nil then",
        "        SetVehicleMod(vehicle, 32, props.modSeats, false)",
        "    end",
        " ",
        "    if props.modSteeringWheel ~= nil then",
        "        SetVehicleMod(vehicle, 33, props.modSteeringWheel, false)",
        "    end",
        " ",
        "    if props.modShifterLeavers ~= nil then",
        "        SetVehicleMod(vehicle, 34, props.modShifterLeavers, false)",
        "    end",
        " ",
        "    if props.modAPlate ~= nil then",
        "        SetVehicleMod(vehicle, 35, props.modAPlate, false)",
        "    end",
        " ",
        "    if props.modSpeakers ~= nil then",
        "        SetVehicleMod(vehicle, 36, props.modSpeakers, false)",
        "    end",
        " ",
        "    if props.modTrunk ~= nil then",
        "        SetVehicleMod(vehicle, 37, props.modTrunk, false)",
        "    end",
        " ",
        "    if props.modHydrolic ~= nil then",
        "        SetVehicleMod(vehicle, 38, props.modHydrolic, false)",
        "    end",
        " ",
        "    if props.modEngineBlock ~= nil then",
        "        SetVehicleMod(vehicle, 39, props.modEngineBlock, false)",
        "    end",
        " ",
        "    if props.modAirFilter ~= nil then",
        "        SetVehicleMod(vehicle, 40, props.modAirFilter, false)",
        "    end",
        " ",
        "    if props.modStruts ~= nil then",
        "        SetVehicleMod(vehicle, 41, props.modStruts, false)",
        "    end",
        " ",
        "    if props.modArchCover ~= nil then",
        "        SetVehicleMod(vehicle, 42, props.modArchCover, false)",
        "    end",
        " ",
        "    if props.modAerials ~= nil then",
        "        SetVehicleMod(vehicle, 43, props.modAerials, false)",
        "    end",
        " ",
        "    if props.modTrimB ~= nil then",
        "        SetVehicleMod(vehicle, 44, props.modTrimB, false)",
        "    end",
        " ",
        "    if props.modTank ~= nil then",
        "        SetVehicleMod(vehicle, 45, props.modTank, false)",
        "    end",
        " ",
        "    if props.modWindows ~= nil then",
        "        SetVehicleMod(vehicle, 46, props.modWindows, false)",
        "    end",
        " ",
        "    if props.modLivery ~= nil then",
        "        SetVehicleMod(vehicle, 48, props.modLivery, false)",
        "        SetVehicleLivery(vehicle, props.modLivery)",
        "    end",
        "    if props.modCustomTyres ~= nil and props.modCustomTyres then ",
        "        SetVehicleMod(vehicle, 23, props.modCustomTyres, true)",
        "    end",
        "end",
        
        
        ],
        "description": "Applies properties to a specific vehicle."
      },


      "TriggerCallback" : { 
       
        "prefix": "QBCore.Functions.TriggerCallback", 
         
        "body": [  
    
        "QBCore.Functions.TriggerCallback = function(name, cb, ...)",
        "    QBCore.ServerCallbacks[name] = cb",
        "    TriggerServerEvent('QBCore:Server:TriggerCallback', name, ...)",
        "end",
        
        
        ],
        "description": "Allows you to retrieve information by calling to the server and getting something in return."
      },


      "DeleteVehicle" : { 
       
        "prefix": "QBCore.Functions.DeleteVehicle", 
         
        "body": [  
    
        "QBCore.Functions.DeleteVehicle = function(vehicle)",
        "    SetEntityAsMissionEntity(vehicle, true, true)",
        "    DeleteVehicle(vehicle)",
        "end",
        
        ],
        "description": "Deletes vehicle entity."
      },


      "ExampleManifest" : { 
       
        "prefix": "QBCore.ExampleManifest", 
         
        "body": [  
    
            "fx_version 'cerulean'",
            "game 'gta5'",
            " ",
            "description 'QBCore Example Manifest'",
            "version '1.0.0'",
            " ",
            "lua54 'yes' -- Add in case you want to use lua 5.4 (https://www.lua.org/manual/5.4/manual.html)",
            " ",
            "shared_script { ",
            "    '@qb-core/import.lua'",
            "}",
            " ",
            "client_scripts {",
            "    'config/config_cl.lua', -- Non globbing method (Client config)",
            "    'client/*.lua' -- Globbing method for multiple files",
            "}",
            " ",
            "server_scripts {",
            "    'config/config_sv.lua', -- Non globbing method (Server config for keeping webhooks or other important information)",
            "    'server/*.lua' -- Globbing method for multiple files",
            "}",
            " ",
            "ui_page 'html/ui.html'",
            " ",
            "files {",
            "    'html/ui.html',",
            "    'html/css/main.css',",
            "    --'html/js/*.js', -- Globbing also works here in case you have multiple js files",
            "    'html/js/app.js'",
            "}",
            " ",
            "dependency 'qb-core'",
        
        ],
        "description": "Pastes an Example Manifest for you to edit."
      },


      "Kick" : { 
       
        "prefix": "QBCore.Functions.Kick", 
         
        "body": [  
    
      "QBCore.Functions.Kick = function(source, reason, setKickReason, deferrals)",
      "    local src = source",
      "    reason = '\n'..reason..'\n🔸 Check our Discord for further information: '..QBCore.Config.Server.discord",
      "    if(setKickReason ~=nil) then",
      "        setKickReason(reason)",
      "    end",
      "    Citizen.CreateThread(function()",
      "        if(deferrals ~= nil)then",
      "            deferrals.update(reason)",
      "            Citizen.Wait(2500)",
      "        end",
      "        if src ~= nil then",
      "            DropPlayer(src, reason)",
      "        end",
      "        local i = 0",
      "        while (i <= 4) do",
      "            i = i + 1",
      "            while true do",
      "                if src ~= nil then",
      "                    if(GetPlayerPing(src) >= 0) then",
      "                        break",
      "                    end",
      "                    Citizen.Wait(100)",
      "                    Citizen.CreateThread(function() ",
      "                        DropPlayer(src, reason)",
      "                    end)",
      "                end",
      "            end",
      "            Citizen.Wait(5000)",
      "        end",
      "    end)",
      "end",
        

        ],
        "description": "Kicks an specified source from the server with a reason."
      },


      "GetPlayerByCitizenId" : { 
       
        "prefix": "QBCore.Functions.GetPlayerByCitizenId", 
         
        "body": [  
    
      "QBCore.Functions.GetPlayerByCitizenId = function(citizenid)",
      "    for src, player in pairs(QBCore.Players) do",
      "        local cid = citizenid",
      "        if QBCore.Players[src].PlayerData.citizenid == cid then",
      "            return QBCore.Players[src]",
      "        end",
      "    end",
      "    return nil",
      "end",

        ],
        "description": "A specified player's source."
      },


      "LoadAnimDict" : { 
       
        "prefix": "LoadAnimDict", 
         
        "body": [  
    
      "function LoadAnimDict(dict)",
      "    while (not HasAnimDictLoaded(dict)) do",
      "        RequestAnimDict(dict)",
      "        Citizen.Wait(5)",
      "    end",
      "end",

        ],
        "description": "Loads an Animation before its called"
      },
}